.panel-body{:style => "display:#{(@website.platform == 'Php' || @platform_tab == 'php') ? 'block' : 'none'};"}
  %a There are various ways to install the PHP integration for Epiclogger. The recommended way is to use
  %a.text-primary{:href => "https://getcomposer.org/", :target => "_blank"} Composer:
  %pre
    %code.language-html
      =preserve do
        :escaped
          $ composer require "raven/raven"
  %h5 Alternatively you can manually install it:
  %ul
    %li
      %a Download and extract the latest
      %a.text-primary{:href => "https://github.com/getsentry/raven-php/archive/master.zip", :target => "_blank"}raven-php
      %a archive to your PHP project.
    %li Require the autoloader in your application:
    %li
      %pre
        %code.language-html
          =preserve do
            :escaped
              require_once '/path/to/Raven/library/Raven/Autoloader.php';

              Raven_Autoloader::register();
  %hr
  %h5 The most important part is the creation of the raven client. Create it once and reference it from anywhere you want to interface with Epiclogger:
  %pre
    %code.language-html
      $client = new Raven_Client('https://#{@website.app_key}:#{@website.app_secret}@#{app_domain}/#{@website.id}');
  %h5 Now call out to the raven client to capture events:
  %pre
    %code.language-html
      =preserve do
        :escaped
          // record a simple message
          $client->captureMessage('hello world!');

          // capture an exception
          try {
              throw new Exception('Uh oh!');
          }
          catch (Exception $e) {
              $client->captureException($e);
          }
  %h5 You can also optionally install a default error handler to catch all exceptions:
  %pre
    %code.language-html
      =preserve do
        :escaped
          $error_handler = new Raven_ErrorHandler($client);

          // Register error handler callbacks
          set_error_handler(array($error_handler, 'handleError'));
          set_exception_handler(array($error_handler, 'handleException'));
  %hr
  %div
    %h4{:style => 'display:inline'} Note:
    %h5{:style => 'display:inline'} We dont recommend registering the generic error handler as it can be quite noisey.