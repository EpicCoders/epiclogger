.col-md-12.pagecontainer.tab#ruby_tab
  .pagetitle.text-center
    %h3 Configuring Ruby
  #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
    %ul.nav.navbar-nav.navbar-left
      %li.active
        %a{:name =>"Ruby", :href => "#ruby"} Ruby
      %li
        %a{:name =>"Rails 3(Ruby)", :href => "#rails-3"} Rails 3
      %li
        %a{:name =>"Rails 4(Ruby)", :href => "#rails-4"} Rails 4
      %li
        %a{:name =>"Sinatra", :href => "#sinatra"} Sinatra
      %li
        %a{:name =>"Sidekiq", :href => "#sidekiq"} Sidekiq
  .panel.panel-default.codeview
    .panel-heading
    .panel-body.tabs#ruby
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
      %br
      %pre
        %code.language-html
          %p gem install sentry-epiclogger
      %div
        %h5{:style => 'display:inline'} Or add it to your
        %code Gemfile:
      %pre
        %code.language-html
          %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
      %h5 Create an instance of the client:
      %pre
        %code.language-html
          =preserve do
            :escaped
              require 'epiclogger'

              Epiclogger.configure do |config|
                config.dsn = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
              end
      %h5 Now wrap your application to capture events:
      %pre
        %code.language-html
          =preserve do
            :escaped
              Epiclogger.capture do
                MyApp.run
              end
      %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
      %pre
        %code
          %h5 rake epiclogger:test
      %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
      %pre
        %code.language-html
          %h5 rake epiclogger:test[DSN]
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
    .panel-body.tabs#rails-3
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
      %br
      %pre
        %code.language-html
          %p gem install sentry-epiclogger
      %div
        %h5{:style => 'display:inline'} Or add it to your
        %code Gemfile:
      %pre
        %code.language-html
          %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
      %div
        %h5{:style => 'display:inline'} Add a
        %code{:style => 'display:inline'} config/initializers/epiclogger.rb
        %h5{:style => 'display:inline'} containing:
      %pre
        %code.language-html
          =preserve do
            :escaped
              require 'epiclogger'

              Epiclogger.configure do |config|
                config.dsn = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
              end
      %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
      %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
      %pre
        %code.language-html
          %h5 rake epiclogger:test[DSN]
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
    .panel-body.tabs#rails-4
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
      %br
      %pre
        %code.language-html
          %p gem install sentry-epiclogger
      %div
        %h5{:style => 'display:inline'} Or add it to your
        %code Gemfile:
      %pre
        %code.language-html
          %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
      %div
        %h5{:style => 'display:inline'} Add a
        %code{:style => 'display:inline'} config/initializers/epiclogger.rb
        %h5{:style => 'display:inline'} containing:
      %pre
        %code.language-html
          =preserve do
            :escaped
              require 'epiclogger'

              Epiclogger.configure do |config|
                config.dsn = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
              end
      %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
      %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
      %pre
        %code.language-html
          %h5 rake epiclogger:test[DSN]
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
    .panel-body.tabs#sinatra
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
      %br
      %pre
        %code.language-html
          %p gem install sentry-epiclogger
      %div
        %h5{:style => 'display:inline'} Or add it to your
        %code Gemfile:
      %pre
        %code.language-html
          %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
      %h5 Configure the client and install the Rack middleware:
      %pre
        %code.language-html
          =preserve do
            :escaped
              require 'sinatra'
              require 'raven'

              Raven.configure do |config|
                config.dsn = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
              end

              use Raven::Rack

              get '/' do
                1 / 0
              end
      %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
      %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
      %pre
        %code.language-html
          %h5 rake epiclogger:test[DSN]
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
    .panel-body.tabs#sidekiq
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
      %br
      %pre
        %code.language-html
          %p gem install sentry-epiclogger
      %div
        %h5{:style => 'display:inline'} Or add it to your
        %code Gemfile:
      %pre
        %code.language-html
          %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
      %h5 Configure the client within your application:
      %pre
        %code.language-html
          =preserve do
            :escaped
              require 'raven'

              Raven.configure do |config|
                config.dsn = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
              end
      %h5 That's it! epiclogger automatically appends middleware to pipe all uncaught exceptions to Sentry.
      %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
      %pre
        %code.language-html
          %h5 rake epiclogger:test
      %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
      %pre
        %code.language-html
          %h5 rake epiclogger:test[DSN]
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.