#current-website
  .col-md-12.pagecontainer#javascript.tab
    .pagetitle.text-center
      %h3 Configuring Javascript
    .panel.panel-default
      .panel-heading Website Configuration
      .panel-body
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-js'}epiclogger-js.
        %br
        %pre
          %code.language-html
            %p &lt;script src="//cdn.epicloggerjs.com/1.1.2/jquery,native/epiclogger.min.js"&gt;&lt;/script&gt;
        %hr
        %h5 Add the any URLs which will be logging errors in your project's settings under Client Security:
        %br
        %img{:src => asset_path("epiclogger-js.png")}
        %hr
        %h5 Configure the client
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                <script>
                  Raven.config('https://{app_key}@test-sentry89.herokuapp.com/{id}', {
                      # we highly recommend restricting exceptions to a domain in order to filter out clutter
                      whitelistUrls: [/example\.com/]
                  }).install();
                  </script>
        %h5 Add additional user context if it's available:
        %pre
          %code.language-html
            =preserve do
              :escaped
                Raven.setUser({
                    email: '<?php echo $_SESSION['email'] ?>',
                    id: '<?php echo $_SESSION['id'] ?>'
                });
        %h5 Now call out to the epiclogger client to capture events:
        %pre
          %code.language-html
            =preserve do
              :escaped
                *record a simple message
                Epiclogger.captureMessage('hello world!')

                *capture an exception
                try {
                  errorThrowingCode();
                } catch(err) {
                  Epiclogger.captureException(err);
                }
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the official documentation for
          %a{:href => 'https://github.com/EpicCoders/epiclogger-js'}epiclogger-js.
  .col-md-12.pagecontainer.tab#node-js
    .pagetitle.text-center
      %h3 Configuring Node.js
    #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
      %ul.nav.navbar-nav.navbar-left
        %li.active
          %a{:name =>"Node.js",:href => "#node-jstab"} Node.js
        %li
          %a{:name =>"Express(Node.js)", :href => "#express"} Express
        %li
          %a{:name =>"Connect(Node.js)",:href => "#connect"} Connect
    .panel.panel-default.codeview
      .panel-heading
      .panel-body.tabs#node-jstab
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
        %br
        %pre
          %code.language-html
            %p npm install epiclogger
        %h5 Create an instance of the client:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                from raven import Client

                client = Client('https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}')
        %h5 You can also optionally install a default error handler to catch all exceptions:
        %pre
          %code.language-html
            %p client.patchGlobal();
        %div
          %h5{:style => 'display:inline'} Ensure Node is run with
          %code NODE_ENV=production:
        %pre
          %code.language-html
            %p NODE_ENV=production node script.js
        %h5 Now call out to the epiclogger client to capture events:
        %pre
          %code.language-html
            =preserve do
              :escaped
                //record a simple message
                client.captureMessage('hello world!')

                //capture an exception
                client.captureError(new Error('Uh oh!!'));
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Node.js, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
      .panel-body.tabs#express
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
        %br
        %pre
          %code.language-html
            %p npm install epiclogger
        %h5 Register an instance of the Express middleware:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                var app = require('express').createServer();

                app.error(raven.middleware.express('https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'));
        %div
          %h5{:style => 'display:inline'} Ensure Node is run with
          %code NODE_ENV=production:
        %pre
          %code.language-html
            %p NODE_ENV=production node script.js
        %hr
        %h5 That's it! Epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Epiclogger.
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Node.js, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
      .panel-body.tabs#connect
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
        %br
        %pre
          %code.language-html
            %p npm install epiclogger
        %h5 Register an instance of the Connect middleware after your main application handler:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                connect(
                  connect.bodyParser(),
                  connect.cookieParser(),
                  mainHandler,
                  raven.middleware.connect('https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'),
                ).listen(3000);
        %div
          %h5{:style => 'display:inline'} Ensure Node is run with
          %code NODE_ENV=production:
        %pre
          %code.language-html
            %p NODE_ENV=production node script.js
        %hr
        %h5 That's it! Epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Epiclogger.
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Node.js, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
  .col-md-12.pagecontainer.tab#python
    .pagetitle.text-center
      %h3 Configurating Python
    #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
      %ul.nav.navbar-nav.navbar-left
        %li.active
          %a{:name =>"Python", :href => "#pythontab"} Python
        %li
          %a{:name =>"Django(Python)", :href => "#django"} Django
        %li
          %a{:name =>"Flask(Python)", :href => "#flask"} Flask
        %li
          %a{:name =>"Tornado(Python)", :href => "#tornado"} Tornado
    .panel-body.tabs#pythontab
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
      %pre
        %code.language-html
          %h5 pip install epiclogger
      %h5 Create an instance of the client:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              from raven import Client

              client = Client('https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}')
      %h5 Now call out to the epiclogger client to capture events:
      %pre
        %code.language-html
          =preserve do
            :escaped
              # record a simple message
              client.captureMessage('hello world!')

              # capture an exception
              try:
                  1 / 0
              except ZeroDivisionError:
                  client.captureException()
      %h5 If you want to wrap a WSGI app to record uncaught exceptions, epiclogger provides a middleware for that:
      %pre
        %code.language-html
          =preserve do
            :escaped
              from epiclogger.middleware import Sentry

              application = Sentry(application, client=client)
      %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
      %pre
        %code.language-html.platform-code
          raven test https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
    .panel-body.tabs#django
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
      %pre
        %code.language-html
          %h5 pip install epiclogger
      %h5 Then simply modify your Django configuration:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              # Set your DSN value
              RAVEN_CONFIG = {
                  'dsn': 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}',
              }

              # Add raven to the list of installed apps
              INSTALLED_APPS = INSTALLED_APPS + (
                  # ...
                  'raven.contrib.django.raven_compat',
              )
      %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
      %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
      %pre
        %code.language-html
          %h5 python manage.py epiclogger test
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
    .panel-body.tabs#flask
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
      %pre
        %code.language-html
          %h5 pip install epiclogger
      %h5 You'll also need blinker if you do not have it already:
      %pre
        %code.language-html
          %h5 pip install blinker
      %i Blinker is required for signals to work within Flask.
      %h5 Add the required configuration in your application setup:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              from raven.contrib.flask import Sentry

              app.config['SENTRY_DSN'] = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
              sentry = Sentry(app)
      %hr
        %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
    .panel-body.tabs#tornado
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
      %pre
        %code.language-html
          %h5 pip install epiclogger
      %h5 Add the required configuration in your application setup:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              import tornado.web
              from raven.contrib.tornado import AsyncSentryClient

              class MainHandler(tornado.web.RequestHandler):
                  def get(self):
                      self.write("Hello, world")

              application = tornado.web.Application([
                  (r"/", MainHandler),
              ])
              application.sentry_client = AsyncSentryClient(
                  "https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}"
              )
      %h5 Once the sentry client is attached to the application, request handlers can automatically capture uncaught exceptions by inheriting the SentryMixin class.
      %pre
        %code.language-html
          =preserve do
            :escaped
              import tornado.web
              from epiclogger.contrib.tornado import SentryMixin

              class UncaughtExceptionExampleHandler(SentryMixin, tornado.web.RequestHandler):
                  def get(self):
                      1 / 0
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
  .col-md-12.pagecontainer.tab#php
    .pagetitle.text-center
      %h3 Configurating PHP
    .panel.panel-default
      .panel-heading
      .panel-body
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}epiclogger-php.
        %h5 Register the autoloader:
        %pre
          %code.language-html
            =preserve do
              :escaped
                require('/path/to/Raven/Autoloader.php');

                Raven_Autoloader::register();
        %h5 Create an instance of the client:
        %pre
          %code.language-html.platform-code
            $client = new Raven_Client('https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}');
        %h5 Now call out to the raven client to capture events:
        %pre
          %code.language-html
            =preserve do
              :escaped
                // record a simple message
                $client->captureMessage('hello world!');

                // capture an exception
                try {
                    throw new Exception('Uh oh!');
                }
                catch (Exception $e) {
                    $client->captureException($e);
                }
        %h5 You can also optionally install a default error handler to catch all exceptions:
        %pre
          %code.language-html
            =preserve do
              :escaped
                $error_handler = new Raven_ErrorHandler($client);

                // Register error handler callbacks
                set_error_handler(array($error_handler, 'handleError'));
                set_exception_handler(array($error_handler, 'handleException'));
        %hr
        %div
          %h4{:style => 'display:inline'} Note:
          %h5{:style => 'display:inline'} We dont recommend registering the generic error handler as it can be quite noisey.
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with PHP, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-php.
  .col-md-12.pagecontainer.tab#ruby
    .pagetitle.text-center
      %h3 Configuring Ruby
    #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
      %ul.nav.navbar-nav.navbar-left
        %li.active
          %a{:name =>"Ruby", :href => "#rubytab"} Ruby
        %li
          %a{:name =>"Rails 3(Ruby)", :href => "#rails-3"} Rails 3
        %li
          %a{:name =>"Rails 4(Ruby)", :href => "#rails-4"} Rails 4
        %li
          %a{:name =>"Sinatra", :href => "#sinatra"} Sinatra
        %li
          %a{:name =>"Sidekiq", :href => "#sidekiq"} Sidekiq
    .panel.panel-default.codeview
      .panel-heading
      .panel-body.tabs#rubytab
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
        %br
        %pre
          %code.language-html
            %p gem install sentry-epiclogger
        %div
          %h5{:style => 'display:inline'} Or add it to your
          %code Gemfile:
        %pre
          %code.language-html
            %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
        %h5 Create an instance of the client:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                require 'epiclogger'

                Epiclogger.configure do |config|
                  config.dsn = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
                end
        %h5 Now wrap your application to capture events:
        %pre
          %code.language-html
            =preserve do
              :escaped
                Epiclogger.capture do
                  MyApp.run
                end
        %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
        %pre
          %code
            %h5 rake epiclogger:test
        %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
        %pre
          %code.language-html
            %h5 rake epiclogger:test[DSN]
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
      .panel-body.tabs#rails-3
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
        %br
        %pre
          %code.language-html
            %p gem install sentry-epiclogger
        %div
          %h5{:style => 'display:inline'} Or add it to your
          %code Gemfile:
        %pre
          %code.language-html
            %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
        %div
          %h5{:style => 'display:inline'} Add a
          %code{:style => 'display:inline'} config/initializers/epiclogger.rb
          %h5{:style => 'display:inline'} containing:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                require 'epiclogger'

                Epiclogger.configure do |config|
                  config.dsn = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
                end
        %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
        %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
        %pre
          %code.language-html
            %h5 rake epiclogger:test[DSN]
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
      .panel-body.tabs#rails-4
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
        %br
        %pre
          %code.language-html
            %p gem install sentry-epiclogger
        %div
          %h5{:style => 'display:inline'} Or add it to your
          %code Gemfile:
        %pre
          %code.language-html
            %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
        %div
          %h5{:style => 'display:inline'} Add a
          %code{:style => 'display:inline'} config/initializers/epiclogger.rb
          %h5{:style => 'display:inline'} containing:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                require 'epiclogger'

                Epiclogger.configure do |config|
                  config.dsn = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
                end
        %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
        %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
        %pre
          %code.language-html
            %h5 rake epiclogger:test[DSN]
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
      .panel-body.tabs#sinatra
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
        %br
        %pre
          %code.language-html
            %p gem install sentry-epiclogger
        %div
          %h5{:style => 'display:inline'} Or add it to your
          %code Gemfile:
        %pre
          %code.language-html
            %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
        %h5 Configure the client and install the Rack middleware:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                require 'sinatra'
                require 'raven'

                Raven.configure do |config|
                  config.dsn = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
                end

                use Raven::Rack

                get '/' do
                  1 / 0
                end
        %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
        %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
        %pre
          %code.language-html
            %h5 rake epiclogger:test[DSN]
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
      .panel-body.tabs#sidekiq
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}epiclogger-ruby.
        %br
        %pre
          %code.language-html
            %p gem install sentry-epiclogger
        %div
          %h5{:style => 'display:inline'} Or add it to your
          %code Gemfile:
        %pre
          %code.language-html
            %p gem "sentry-epiclogger", :git => "https://github.com/getsentry/epiclogger-ruby.git"
        %h5 Configure the client within your application:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                require 'raven'

                Raven.configure do |config|
                  config.dsn = 'https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}'
                end
        %h5 That's it! epiclogger automatically appends middleware to pipe all uncaught exceptions to Sentry.
        %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
        %pre
          %code.language-html
            %h5 rake epiclogger:test
        %h5 Note: If you're not bootstrapping the epiclogger gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
        %pre
          %code.language-html
            %h5 rake epiclogger:test[DSN]
        %hr
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Ruby, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for epiclogger-ruby.
  .col-md-12.pagecontainer.tab#java
    .pagetitle.text-center
      %h3 Configurating Java
    #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
      %ul.nav.navbar-nav.navbar-left
        %li.active
          %a{:name =>"Java", :href => "#javatab"} Java
        %li
          %a{:name =>"Java Util Logging(Java)", :href => "#java-util-logging"} java.util.logging
        %li
          %a{:name =>"Log4j(Java)", :href => "#log4j"} log4j
        %li
          %a{:name =>"Log4j2(Java)", :href => "#log4j2"} log4j2
        %li
          %a{:name =>"Logback(Java)", :href => "#logback"} logback
    .panel-body.tabs#javatab
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-java'}epiclogger-java.
      %h5 The easiest way to add the Raven dependency is with Maven:
      %pre
        %code.language-html
          =preserve do
            :escaped
              <dependency>
                <groupId>net.kencochrane.raven</groupId>
                <artifactId>raven</artifactId>
                <version>4.0</version>
              </dependency>
      %h5 You can manually send events using the EventBuilder:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              import net.kencochrane.raven.Raven;
              import net.kencochrane.raven.Raven;
              import net.kencochrane.raven.event.EventBuilder;
              import net.kencochrane.raven.event.interfaces.ExceptionInterface;

              public class Example {
                  public static void main(String[] args) {
                      String rawDsn = "https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}";
                      Raven raven = RavenFactory.ravenInstance(new Dsn(rawDsn));

                      // record a simple message
                      EventBuilder eventBuilder = new EventBuilder()
                                      .setMessage("Hello from Raven!")
                                      .setLevel(Event.Level.ERROR)
                                      .setLogger(MyClass.class.getName())
                                      .addSentryInterface(new ExceptionInterface(e));

                      raven.runBuilderHelpers(eventBuilder); // Optional
                      raven.sendEvent(eventBuilder.build());
                  }
              }
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Java, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-java.
    .panel-body.tabs#java-util-logging
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-java'}epiclogger-java.
      %h5 The easiest way to add the Raven dependency is with Maven:
      %pre
        %code.language-html
          =preserve do
            :escaped
              <dependency>
                <groupId>net.kencochrane.raven</groupId>
                <artifactId>raven</artifactId>
                <version>4.0</version>
              </dependency>
      %h5 You'll need to configure the SentryHandler in your logging.properties:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              level=ERROR
              handlers=net.kencochrane.raven.jul.SentryHandler
              net.kencochrane.raven.jul.SentryHandler.dsn=https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Java, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-java.
    .panel-body.tabs#log4j
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-java'}epiclogger-java.
      %h5 The easiest way to add the Raven dependency is with Maven:
      %pre
        %code.language-html
          =preserve do
            :escaped
              <dependency>
                <groupId>net.kencochrane.raven</groupId>
                <artifactId>raven</artifactId>
                <version>4.0</version>
              </dependency>
      %h5 You'll need to configure the SentryAppender in your logging configuration:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              log4j.rootLogger=DEBUG, SentryAppender
              log4j.appender.SentryAppender=net.kencochrane.raven.log4j.SentryAppender
              log4j.appender.SentryAppender.dsn=https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}
              level=ERROR
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Java, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-java.
    .panel-body.tabs#log4j2
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-java'}epiclogger-java.
      %h5 The easiest way to add the Raven dependency is with Maven:
      %pre
        %code.language-html
          =preserve do
            :escaped
              <dependency>
                <groupId>net.kencochrane.raven</groupId>
                <artifactId>raven</artifactId>
                <version>4.0</version>
              </dependency>
      %h5 You'll need to configure the SentryAppender in your logging configuration:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              <?xml version="1.0" encoding="UTF-8"?>
              <configuration status="warn" packages="org.apache.logging.log4j.core,net.kencochrane.raven.log4j2">
                  <appenders>
                      <Raven name="Sentry">
                          <dsn>
                              https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}
                          </dsn>
                      </Raven>
                  </appenders>

                  <loggers>
                      <root level="error">
                          <appender-ref ref="Sentry"/>
                      </root>
                  </loggers>
              </configuration>
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Java, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-java.
    .panel-body.tabs#logback
      %div
        %h5{:style => 'display:inline'} Start by installing
        %a{:href => 'https://github.com/EpicCoders/epiclogger-java'}epiclogger-java.
      %h5 The easiest way to add the Raven dependency is with Maven:
      %pre
        %code.language-html
          =preserve do
            :escaped
              <dependency>
                <groupId>net.kencochrane.raven</groupId>
                <artifactId>raven</artifactId>
                <version>4.0</version>
              </dependency>
      %h5 You'll need to configure the SentryAppender in your logging configuration:
      %pre
        %code.language-html.platform-code
          =preserve do
            :escaped
              <configuration>
              <appender name="Sentry" class="net.kencochrane.raven.logback.SentryAppender">
                  <dsn>
                      https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}
                  </dsn>
              </appender>

              <root level="error">
                  <appender-ref ref="Sentry"/>
              </root>
          </configuration>
      %hr
      %div
        %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Java, please see the
        %a{:href => 'https://github.com/EpicCoders/epiclogger-php'}official documentation for epiclogger-java.
  .col-md-12.pagecontainer.tab#ios
    .pagetitle.text-center
      %h3 Configurating IOS
    .panel.panel-default
      .panel-heading
      .panel-body
        %div
          %h5{:style => 'display:inline'} Start by installing
          %a{:href => 'https://github.com/EpicCoders/epiclogger-objc'}epiclogger-objc.
        %pre
          %code.language-html
            =preserve do
              :escaped
                cd [your project root]
                git submodule add git://github.com/getsentry/epiclogger-objc
        %h6 (Installing the client as a git submodule will make future updates easier)
        %div
          %h5{:style => 'display:inline'} Initialize the client. This is usually done in your app delegate's
          %code application:didFinishLaunchingWithOptions:
        %pre
          %code.language-html.platform-code
            =preserve do
              :escaped
                - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
                  // Configure the Sentry client
                  [RavenClient clientWithDSN:@"https://{app_key}:{app_id}@test-sentry89.herokuapp.com/{id}"];

                  // Install the global error handler
                  [[RavenClient sharedClient] setupExceptionHandler];

                  return YES;
              }
        %hr
        %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
        %div
          %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with IOS, please see the
          %a{:href => 'https://github.com/EpicCoders/epiclogger-objc'}official documentation for epiclogger-objc.