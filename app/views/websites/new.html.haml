#page-background
  .col-lg-9.align-wizard
    .panel.panel-primary
      .panel-heading.text-center
        %h4 Create New Project
      .panel-body
        .row
          .stepwizard
            .stepwizard-row
              .stepwizard-step
                %a.btn.btn-primary.btn-circle.active-step.tab1{"data-toggle" => "tab", :href => "#step-1"} 1
                %p Add Website
              .stepwizard-step
                %a.btn.btn-default.btn-circle.tab2{"data-toggle" => "tab", :disabled => "disabled", :href => "#step-2"} 2
                %p Chose Platform
              .stepwizard-step
                %a.btn.btn-default.btn-circle.tab3{"data-toggle" => "tab", :disabled => "disabled", :href => "#step-3"} 3
                %p Configuration
        .rate-updates#current-website
          .tab-content.margintop0{:style => "border:none !important;"}
            #step-1.tab-pane.fade.active.in.padding20
              %form#addWebsite{:action => "", :method => "post"}
                .form-group
                  %label.control-label Name
                  %input#title.form-control{:placeholder => "Website name", :required => "required", :type => "text", :name => 'website[title]'}/
                .form-group
                  %label.control-label Domain
                  %input#domain.form-control{:placeholder => "http://www.domain.com", :required => "required", :type => "url", :name => 'website[domain]'}/
                %br
                %br
                %button.btn.btn-success.pull-left#valid_website{:style => "width: 150px;",:name => 2, :type => "submit"}
                  %i.icon-next
                  Next
                %a.btn.btn-warning.pull-right#custom-button{:style => "width: 150px;", :href => "#", :onclick => 'EpicLogger.logout()'}
                  %i.icon-next
                  Log out
              %br
              %br
              %br
                .progress
                  .progress-bar.progress-bar-info.progress-bar-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "33", :role => "progressbar", :style => "width: 1%"}
            #step-2.tab-pane.fade.padding20
              .col-md-12.pagecontainer
                .pagetitle.text-center
                  %h3 Installation and configuration
                .panel.panel-default.codeview
                  .panel-heading Client Configuration
                  .panel-body
                    %h5 To start sending events, configure your client with the following DSN value:
                    .events_dsn
                    / .codepanel
                    %br/
                    %h5 If this is a client that only needs public access (like epiclogger-js), you can use the following public DSN:
                    .codepanel
                      .public_dsn
                .panel.panel-default.tileview
                  .panel-heading Platforms
                  .panel-body#platform{:style => 'cursor: pointer'}
                    %a.tile.text-center.resize-a{:name => "javascript"}
                      %img.resize-img{:src => image_path("icon_javascript.png")}/
                      %span Javascript
                    %a.tile.text-center.resize-a{:name => "node-js"}
                      %img.resize-img{:src => image_path("icon_nodejs.png")}/
                      %span Node Js
                    %a.tile.text-center.resize-a{:name => "ruby"}
                      %img.resize-img{:src => image_path("icon_ruby.png")}/
                      %span Ruby
                    %a.tile.text-center.resize-a{:name => "python"}
                      %img.resize-img{:src => image_path("icon_python.png")}/
                      %span Python
                    %a.tile.text-center.resize-a{:name => "ios"}
                      %img.resize-img{:src => image_path("icon_ios.png")}/
                      %span IOS
                    %a.tile.text-center.resize-a{:name => "php"}
                      %img.resize-img{:src => image_path("icon_php.png")}/
                      %span PHP
                    %a.tile.text-center.resize-a{:name => "java"}
                      %img.resize-img{:src => image_path("icon_java.png")}/
                      %span Java
                .panel.panel-default.tileview#client-frameworks
                  .panel-heading Frameworks
                  .panel-body
                    %a.tile.text-center.resize-a{:href => "installations/show#rails-3"}
                      %img.resize-img{:src => image_path("icon_rails.png")}/
                      %span Rails 3
                    %a.tile.text-center.resize-a{:href => "installations/show#rails-4"}
                      %img.resize-img{:src => image_path("icon_rails.png")}/
                      %span Rails 4
                    %a.tile.text-center.resize-a{:href => "installations/show#django"}
                      %img.resize-img{:src => image_path("icon_django.png")}/
                      %span Django
                %div
                  %h5{:style => 'display:inline'} For more information on developing clients and the Sentry API, see the
                  %a{:href => '#'}documentation.
                %p
                %p
                .progress
                  .progress-bar.progress-bar-info.progress-bar-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "33", :role => "progressbar", :style => "width: 34%"}
                    Website added, pick your platform
            #step-3.tab-pane.fade.padding20
              .col-md-12.pagecontainer.tab#javascript
                .pagetitle.text-center
                  %h3 Configuring Javascript
                / .panel.panel-default.codeview
                /   .panel-heading Current site information
                /   .panel-body
                /     %table.table
                /       %thead
                /         %tr
                /           %th Website Title
                /           %th Website Domain
                /           %th App Key
                /           %th App Secret
                /       %tbody.websites
                /         %tr
                /           %td.title
                /           %td.domain
                /           %td.app_key
                /           %td.app_id
                .panel.panel-default.codeview
                  .panel-heading
                  .panel-body
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-js'}epiclogger-js.
                    %br
                    %pre
                      %code
                        %p &lt;script src="//cdn.epicloggerjs.com/1.1.2/jquery,native/epiclogger.min.js"&gt;&lt;/script&gt;
                    %hr
                    %h5 Add the any URLs which will be logging errors in your project's settings under Client Security:
                    %br
                    %img{:src => asset_path("epiclogger-js.png")}
                    %hr
                    %h5 Configure the client
                    %pre
                      %code
                        .js_client_configuration
                    %h5 Add additional user context if it's available:
                    %pre
                      %code
                        %p Epiclogger.setUser({<br />email: '&lt;?php echo $_SESSION['email'] ?&gt;',<br />id: '&lt;?php echo $_SESSION['id'] ?&gt;'<br />});
                    %h5 Now call out to the epiclogger client to capture events:
                    %pre
                      %code
                        *record a simple message<br />Epiclogger.captureMessage('hello world!')<br /><br />*capture an exception<br />try {<br />  errorThrowingCode();<br />} catch(err) {<br />  Epiclogger.captureException(err);<br />}
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the official documentation for
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-js'}epiclogger-js.
              .col-md-12.pagecontainer.tab#node-js
                .pagetitle.text-center
                  %h3 Configuring Node.js
                %ul.nav.nav-tabs
                  %li.active
                    %a{:href => "#nodejs"} Node.js
                  %li
                    %a{:href => "#express"} Express
                  %li
                    %a{:href => "#connect"} Connect
                .panel.panel-default.codeview
                  .panel-heading
                  .panel-body.tabs#nodejs
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
                    %br
                    %pre
                      %code
                        %p npm install epiclogger
                    %h5 Create an instance of the client:
                    %pre
                      %code
                        .node_client_configuration
                    %h5 You can also optionally install a default error handler to catch all exceptions:
                    %pre
                      %code
                        %p client.patchGlobal();
                    %div
                      %h5{:style => 'display:inline'} Ensure Node is run with
                      %code NODE_ENV=production:
                    %pre
                      %code
                        %p NODE_ENV=production node script.js
                    %h5 Now call out to the epiclogger client to capture events:
                    %pre
                      %code
                        *record a simple message<br />client.captureMessage('hello world!')<br /><br />*capture an exception<br />client.captureError(new Error('Uh oh!!'));
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
                  .panel-body.tabs#express
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
                    %br
                    %pre
                      %code
                        %p npm install epiclogger
                    %h5 Register an instance of the Express middleware:
                    %pre
                      %code
                        .express_client_configuration
                    %div
                      %h5{:style => 'display:inline'} Ensure Node is run with
                      %code NODE_ENV=production:
                    %pre
                      %code
                        %p NODE_ENV=production node script.js
                    %hr
                    %h5 That's it! Epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Epiclogger.
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
                  .panel-body.tabs#connect
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}epiclogger-node.
                    %br
                    %pre
                      %code
                        %p npm install epiclogger
                    %h5 Register an instance of the Connect middleware after your main application handler:
                    %pre
                      %code
                        .connect_client_configuration
                    %div
                      %h5{:style => 'display:inline'} Ensure Node is run with
                      %code NODE_ENV=production:
                    %pre
                      %code
                        %p NODE_ENV=production node script.js
                    %hr
                    %h5 That's it! Epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Epiclogger.
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-node'}official documentation for epiclogger-node.
              .col-md-12.pagecontainer.tab#ruby
                .pagetitle.text-center
                  %h3 Configuring Ruby
                %ul.nav.nav-tabs
                  %li.active
                    %a{:href => "#rubytab"} Ruby
                  %li
                    %a{:href => "#rails-3"} Rails 3
                  %li
                    %a{:href => "#rails-4"} Rails 4
                  %li
                    %a{:href => "#sinatra"} Sinatra
                  %li
                    %a{:href => "#sidekiq"} Sidekiq
                .panel.panel-default.codeview
                  .panel-heading
                  .panel-body.tabs#rubytab
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}raven-ruby.
                    %br
                    %pre
                      %code
                        %p gem install sentry-raven
                    %div
                      %h5{:style => 'display:inline'} Or add it to your
                      %code Gemfile:
                    %pre
                      %code
                        %p gem "sentry-raven", :git => "https://github.com/getsentry/raven-ruby.git"
                    %h5 Create an instance of the client:
                    %pre
                      %code
                        .ruby_client_configuration
                    %h5 Now wrap your application to capture events:
                    %pre
                      %code
                        %h5 Raven.capture do<br />    MyApp.run<br />end
                    %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 Note: If you're not bootstrapping the Raven gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
                    %pre
                      %code
                        %h5 rake raven:test[DSN]
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for raven-ruby.
                  .panel-body.tabs#rails-3
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}raven-ruby.
                    %br
                    %pre
                      %code
                        %p gem install sentry-raven
                    %div
                      %h5{:style => 'display:inline'} Or add it to your
                      %code Gemfile:
                    %pre
                      %code
                        %p gem "sentry-raven", :git => "https://github.com/getsentry/raven-ruby.git"
                    %div
                      %h5{:style => 'display:inline'} Add a
                      %code{:style => 'display:inline'} config/initializers/raven.rb
                      %h5{:style => 'display:inline'} containing:
                    %pre
                      %code
                        .ruby_client_configuration
                    %h5 That's it! Raven automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
                    %h5 If you wish to test your connection to the server, you can use the raven test command:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 Note: If you're not bootstrapping the Raven gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
                    %pre
                      %code
                        %h5 rake raven:test[DSN]
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for raven-ruby.
                  .panel-body.tabs#rails-4
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}raven-ruby.
                    %br
                    %pre
                      %code
                        %p gem install sentry-raven
                    %div
                      %h5{:style => 'display:inline'} Or add it to your
                      %code Gemfile:
                    %pre
                      %code
                        %p gem "sentry-raven", :git => "https://github.com/getsentry/raven-ruby.git"
                    %div
                      %h5{:style => 'display:inline'} Add a
                      %code{:style => 'display:inline'} config/initializers/raven.rb
                      %h5{:style => 'display:inline'} containing:
                    %pre
                      %code
                        .ruby_client_configuration
                    %h5 That's it! Raven automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
                    %h5 If you wish to test your connection to the server, you can use the raven test command:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 Note: If you're not bootstrapping the Raven gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
                    %pre
                      %code
                        %h5 rake raven:test[DSN]
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for raven-ruby.
                  .panel-body.tabs#sinatra
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}raven-ruby.
                    %br
                    %pre
                      %code
                        %p gem install sentry-raven
                    %div
                      %h5{:style => 'display:inline'} Or add it to your
                      %code Gemfile:
                    %pre
                      %code
                        %p gem "sentry-raven", :git => "https://github.com/getsentry/raven-ruby.git"
                    %h5 Configure the client and install the Rack middleware:
                    %pre
                      %code
                        .sinatra_client_configuration
                    %h5 That's it! Raven automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
                    %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 Note: If you're not bootstrapping the Raven gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
                    %pre
                      %code
                        %h5 rake raven:test[DSN]
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for raven-ruby.
                  .panel-body.tabs#sidekiq
                    %div
                      %h5{:style => 'display:inline'} Start by installing
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}raven-ruby.
                    %br
                    %pre
                      %code
                        %p gem install sentry-raven
                    %div
                      %h5{:style => 'display:inline'} Or add it to your
                      %code Gemfile:
                    %pre
                      %code
                        %p gem "sentry-raven", :git => "https://github.com/getsentry/raven-ruby.git"
                    %h5 Configure the client within your application:
                    %pre
                      %code
                        .ruby_client_configuration
                    %h5 That's it! Raven automatically appends middleware to pipe all uncaught exceptions to Sentry.
                    %h5 You may want to give things a try, you might want to use the included Rake task to test your configuration:
                    %pre
                      %code
                        %h5 rake raven:test
                    %h5 Note: If you're not bootstrapping the Raven gem somewhere that's included in your Rakefile, you'll have to manually pass the DSN value:
                    %pre
                      %code
                        %h5 rake raven:test[DSN]
                    %hr
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-ruby'}official documentation for raven-ruby.
              .col-md-12.pagecontainer.tab#python
                .pagetitle.text-center
                  %h3 Configurating Python
                %ul.nav.nav-tabs
                  %li.active
                    %a{:href => "#pythontab"} Python
                  %li
                    %a{:href => "#django"} Django
                  %li
                    %a{:href => "#flask"} Flask
                  %li
                    %a{:href => "#tornado"} Tornado
                .panel-body.tabs#pythontab
                  %div
                    %h5{:style => 'display:inline'} Start by installing
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}raven-python.
                  %pre
                    %code
                      %h5 pip install raven
                  %h5 Create an instance of the client:
                  %pre
                    %code
                      .python_client_configuration
                  %h5 Now call out to the raven client to capture events:
                  %pre
                    %code
                      %h5 # record a simple message<br />client.captureMessage('hello world!')<br /><br /># capture an exception<br />try:<br />    1 / 0<br />except ZeroDivisionError:<br />    client.captureException()
                  %h5 If you want to wrap a WSGI app to record uncaught exceptions, Raven provides a middleware for that:
                  %pre
                    %code
                      %h5 from raven.middleware import Sentry<br /><br />application = Sentry(application, client=client)
                  %h5 If you wish to test your connection to the server, you can use the raven test command:
                  %pre
                    %code
                      .python_test_command
                  %hr
                  %div
                    %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for raven-python.
                .panel-body.tabs#django
                  %div
                    %h5{:style => 'display:inline'} Start by installing
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}raven-python.
                  %pre
                    %code
                      %h5 pip install raven
                  %h5 Then simply modify your Django configuration:
                  %pre
                    %code
                      .django_client_configuration
                  %h5 That's it! Raven automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
                  %h5 If you wish to test your connection to the server, you can use the raven test command:
                  %pre
                    %code
                      %h5 python manage.py raven test
                  %hr
                  %div
                    %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for raven-python.
                .panel-body.tabs#flask
                  %div
                    %h5{:style => 'display:inline'} Start by installing
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}raven-python.
                  %pre
                    %code
                      %h5 pip install raven
                  %h5 You'll also need blinker if you do not have it already:
                  %pre
                    %code
                      %h5 pip install blinker
                  %i Blinker is required for signals to work within Flask.
                  %h5 Add the required configuration in your application setup:
                  %pre
                    %code
                      .flask_client_configuration
                  %hr
                    %h5 That's it! Raven automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
                    %div
                      %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                      %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for raven-python.
                .panel-body.tabs#tornado
                  %div
                    %h5{:style => 'display:inline'} Start by installing
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}raven-python.
                  %pre
                    %code
                      %h5 pip install raven
                  %h5 Add the required configuration in your application setup:
                  %pre
                    %code
                      .tornado_client_configuration
                  %h5 Once the sentry client is attached to the application, request handlers can automatically capture uncaught exceptions by inheriting the SentryMixin class.
                  %pre
                    %code
                      %h5 import tornado.web<br />from raven.contrib.tornado import SentryMixin<br /><br />class UncaughtExceptionExampleHandler(SentryMixin, tornado.web.RequestHandler):<br />    def get(self):<br />        1 / 0
                  %hr
                  %div
                    %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Javascript, please see the
                    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for raven-python.
              .col-md-12.pagecontainer.tab#ios
                .pagetitle.text-center
                  %h3 Installation and configuration for IOS
              .col-md-12.pagecontainer.tab#php
                .pagetitle.text-center
                  %h3 Installation and configuration for Php
              .col-md-12.pagecontainer.tab#java
                .pagetitle.text-center
                  %h3 Installation and configuration for Java
              .col-md-12.pagecontainer.tab#django
                .pagetitle.text-center
                  %h3 Installation and configuration for Django
              %button.btn.btn-primary#back{:style => "width: 150px;",:name => 2, :type => "button"}
                %i.icon-next
                Go Back
              %button.btn.btn-success.pull-right#finish{:style => "width: 150px;",:name => 0, :type => "button"}
                %i.icon-next
                Finish
              %p
              .progress
                .progress-bar.progress-bar-info.progress-bar-striped.active{"aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => "33", :role => "progressbar", :style => "width: 67%"}
                  Two steps behind, configure youre app and start