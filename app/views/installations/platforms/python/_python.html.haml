.panel-body.tabs#python{:style => "display:#{(@website.platform == 'Python' || @platform_tab == 'python') ? 'block' : 'none'};"}
  %div
    %h5{:style => 'display:inline'} Start by installing
    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
  %pre
    %code.language-html
      %h5 pip install epiclogger
  %h5 Create an instance of the client:
  %pre
    %code.language-html
      =preserve do
        :escaped
          from raven import Client

          client = Client('https://#{@website.app_key}:#{@website.app_secret}@test-sentry89.herokuapp.com/#{@website.id}')
  %h5 Now call out to the epiclogger client to capture events:
  %pre
    %code.language-html
      =preserve do
        :escaped
          # record a simple message
          client.captureMessage('hello world!')

          # capture an exception
          try:
              1 / 0
          except ZeroDivisionError:
              client.captureException()
  %h5 If you want to wrap a WSGI app to record uncaught exceptions, epiclogger provides a middleware for that:
  %pre
    %code.language-html
      =preserve do
        :escaped
          from epiclogger.middleware import Sentry

          application = Sentry(application, client=client)
  %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
  %pre
    %code.language-html
      raven test https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}
  %hr
  %div
    %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
    %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.