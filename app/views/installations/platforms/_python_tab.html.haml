.col-md-12.pagecontainer.tab#python_tab
  .pagetitle.text-center
    %h3 Configuring Python
    = @tab
  #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
    %ul.nav.navbar-nav.navbar-left
      %li{class: @tab == 'python' ? 'active' : ''}
        %a{name: "python", href: "#python"} Python
      %li{class: @tab == 'django' ? 'active' : ''}
        %a{:name =>"django", :href => "#django"} Django
      %li{class: ( @tab == 'flask' ? 'active' : '')}
        %a{:name =>"flask", :href => "#flask"} Flask
      %li{class: @tab == 'tornado' ? 'active' : ''}
        %a{:name =>"tornado", :href => "#tornado"} Tornado
  .panel.panel-default.codeview
    .panel-heading
    = render partial: 'installations/platforms/python/python'
    = render partial: 'installations/platforms/python/django'
    = render partial: 'installations/platforms/python/flask'
    = render partial: 'installations/platforms/python/tornado'

/ .col-md-12.pagecontainer.tab#python_tab
/   .pagetitle.text-center
/     %h3 Configurating Python
/   #custom-bootstrap.navbar.navbar-default{:role => "navigation"}
/     %ul.nav.navbar-nav.navbar-left
/       %li.active
/         %a{:name =>"python", :href => "#python"} Python
/       %li
/         %a{:name =>"django", :href => "#django"} Django
/       %li
/         %a{:name =>"flask", :href => "#flask"} Flask
/       %li
/         %a{:name =>"tornado", :href => "#tornado"} Tornado
/   .panel-body.tabs#python
/     %div
/       %h5{:style => 'display:inline'} Start by installing
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
/     %pre
/       %code.language-html
/         %h5 pip install epiclogger
/     %h5 Create an instance of the client:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             from raven import Client

/             client = Client('https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}')
/     %h5 Now call out to the epiclogger client to capture events:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             # record a simple message
/             client.captureMessage('hello world!')

/             # capture an exception
/             try:
/                 1 / 0
/             except ZeroDivisionError:
/                 client.captureException()
/     %h5 If you want to wrap a WSGI app to record uncaught exceptions, epiclogger provides a middleware for that:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             from epiclogger.middleware import Sentry

/             application = Sentry(application, client=client)
/     %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
/     %pre
/       %code.language-html
/         raven test https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}
/     %hr
/     %div
/       %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
/   .panel-body.tabs#django
/     %div
/       %h5{:style => 'display:inline'} Start by installing
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
/     %pre
/       %code.language-html
/         %h5 pip install epiclogger
/     %h5 Then simply modify your Django configuration:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             # Set your DSN value
/             RAVEN_CONFIG = {
/                 'dsn': 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}',
/             }

/             # Add raven to the list of installed apps
/             INSTALLED_APPS = INSTALLED_APPS + (
/                 # ...
/                 'raven.contrib.django.raven_compat',
/             )
/     %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
/     %h5 If you wish to test your connection to the server, you can use the epiclogger test command:
/     %pre
/       %code.language-html
/         %h5 python manage.py epiclogger test
/     %hr
/     %div
/       %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
/   .panel-body.tabs#flask
/     %div
/       %h5{:style => 'display:inline'} Start by installing
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
/     %pre
/       %code.language-html
/         %h5 pip install epiclogger
/     %h5 You'll also need blinker if you do not have it already:
/     %pre
/       %code.language-html
/         %h5 pip install blinker
/     %i Blinker is required for signals to work within Flask.
/     %h5 Add the required configuration in your application setup:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             from raven.contrib.flask import Sentry

/             app.config['SENTRY_DSN'] = 'https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}'
/             sentry = Sentry(app)
/     %hr
/       %h5 That's it! epiclogger automatically installs an error handling hook to pipe all uncaught exceptions to Sentry.
/       %div
/         %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
/         %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.
/   .panel-body.tabs#tornado
/     %div
/       %h5{:style => 'display:inline'} Start by installing
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}epiclogger-python.
/     %pre
/       %code.language-html
/         %h5 pip install epiclogger
/     %h5 Add the required configuration in your application setup:
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             import tornado.web
/             from raven.contrib.tornado import AsyncSentryClient

/             class MainHandler(tornado.web.RequestHandler):
/                 def get(self):
/                     self.write("Hello, world")

/             application = tornado.web.Application([
/                 (r"/", MainHandler),
/             ])
/             application.sentry_client = AsyncSentryClient(
/                 "https://#{@website.app_key}:#{@website.app_key}@test-sentry89.herokuapp.com/#{@website.id}"
/             )
/     %h5 Once the sentry client is attached to the application, request handlers can automatically capture uncaught exceptions by inheriting the SentryMixin class.
/     %pre
/       %code.language-html
/         =preserve do
/           :escaped
/             import tornado.web
/             from epiclogger.contrib.tornado import SentryMixin

/             class UncaughtExceptionExampleHandler(SentryMixin, tornado.web.RequestHandler):
/                 def get(self):
/                     1 / 0
/     %hr
/     %div
/       %h5{:style => 'display:inline'}For more information on other uses of Epiclogger with Python, please see the
/       %a{:href => 'https://github.com/EpicCoders/epiclogger-python'}official documentation for epiclogger-python.